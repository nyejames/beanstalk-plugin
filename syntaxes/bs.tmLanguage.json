{
    "version": "0.1",
    "name": "Beanstalk",
    "scopeName": "source.bs",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#scenes"
        },
        {
            "include": "#types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#assignment"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#control-statement"
        },
        {
            "include": "#collections"
        },
        {
            "include": "#lib-functions"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.bs",
                    "match": "--(?!-)[^\n]*"
                }
            ]
        },
        "scenes": {
            "patterns": [
                {
                    "name": "entity.name.tag.scene.bs",
                    "begin": "\\[",
                    "end": "\\]",
                    "patterns": [
                        {
                            "include": "#code-blocks"
                        },
                        {
                            "include": "#tuples"
                        },
                        {
                            "name": "keyword.declaration.tag.bs",
                            "end": "(?=:)",
                            "patterns": [
                                {
                                    "name": "meta.paragraph.markdown",
                                    "begin": "(?<=:)",
                                    "end": "(?=\\])",
                                    "patterns": [
                                        {
                                            "include": "#scenes",
                                            "begin": "\\["
                                        },
                                        {
                                            "name": "punctuation.definition.heading.markdown",
                                            "match": "^\\s*#+\\s.*"
                                        },
                                        {
                                            "include": "#numbers"
                                        },
                                        {
                                            "name": "punctuation.definition.bold.markdown",
                                            "match": "\\*\\*[^\\*]+\\*\\*"
                                        },
                                        {
                                            "name": "punctuation.definition.italic.markdown",
                                            "match": "\\*[^\\*]+\\*"
                                        }
                                    ]
                                },
                                {
                                    "include": "#types"
                                },
                                {
                                    "include": "#strings"
                                },
                                {
                                    "include": "#assignment"
                                },
                                {
                                    "include": "#operators"
                                },
                                {
                                    "include": "#numbers"
                                },
                                {
                                    "include": "#control-statement"
                                },
                                {
                                    "include": "#punctuation"
                                },
                                {
                                    "include": "#collections"
                                },
                                {
                                    "include": "#variables"
                                },
                                {
                                    "include": "#scene-tags"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.primitive.bs",
                    "match": "\\b(?:Int|Float|Bool|String|Scene|Choice|Type|Error|Style|True|False|true|false|fn|\\$|\\?|\\!)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.bs",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.bs",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "assignment": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment",
                    "match": "=|:|@"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.control.bs",
                    "match": "\\b(?:and|or|not|is|in|to)\\b"
                },
                {
                    "name": "keyword.operator.symbol.bs",
                    "match": "(?:<=|>=|=>|>>|<<|->|<|>|\\+|\\-|\\*|\\/|\\%|\\^)"
                }
            ]
        },
        "collections": {
            "patterns": [
                {
                    "comment": "ALL CAPS constants",
                    "name": "constant.other.caps.bs",
                    "match": "\\b[A-Z]{2}[A-Z0-9_]*\\b"
                },
                {
                    "comment": "structs are any variable name in PascalCase",
                    "name": "entity.name.type.struct.bs",
                    "match": "\\b(?=[A-Z][A-Za-z0-9_]*[a-z])[A-Z][A-Za-z0-9_]*\\b"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.bs",
                    "match": "\\b(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?\\b"
                }
            ]
        },
        "control-statement": {
            "patterns": [
                {
                    "name": "keyword.control.bs",
                    "match": "\\b(?:if|else|match|for|return|end|continue|defer|panic|as|copy)\\b"
                }
            ]
        },
        "punctuation": {
			"patterns": [
				{
					"comment": "comma",
					"name": "keyword.punctuation.comma.bs",
					"match": ","
				},
				{
					"comment": "curly braces",
					"name": "punctuation.brackets.curly.bs",
					"match": "[{}]"
				},
				{
					"comment": "parentheses, round brackets",
					"name": "punctuation.brackets.round.bs",
					"match": "[()]"
				},
				{
					"comment": "semicolon",
					"name": "punctuation.semi.bs",
					"match": ";"
				},
				{
					"comment": "square brackets",
					"name": "punctuation.brackets.square.bs",
					"match": "[\\[\\]]"
				},
				{
					"comment": "angle brackets",
					"name": "punctuation.brackets.angle.bs",
					"match": "(?<!=)[<>]"
				},
                {
                    "comment": "export symbol '@'",
                    "name": "punctuation.export.bs",
                    "match": "@"
                }
			]
		},
        "variables": {
			"patterns": [
				{
					"comment": "variables",
					"name": "variable.language.bs",
					"match": "\\b(?<!(?<!\\.)\\.)(?:r#)?[a-z0-9_]+\\b"
				}
			]
		},
        "scene-tags" : {
            "patterns": [
                {
                    "name": "variable.language.tag.bs",
                    "match": "\\b(?<!(?<!\\.)\\.)(?:r#)?[a-z0-9_]+\\b"
                }
            ]
        },
        "lib-functions" : {
            "patterns": [
                {
                    "comment": "Includes built in collection methods",
                    "name": "support.function.bs",
                    "match": "\\b(?:print|import|assert|get|set|push|pull|clear|length|last|index|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)\\b"
                }
            ]
        },
        "tuples" : {
            "patterns": [
                {
                    "name": "entity.name.type.tuple.bs",
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#collections"
                        },
                        {
                            "include": "#lib-functions"
                        },
                        {
                            "include": "#operators"
                        },
                        {
                            "include": "#assignment"
                        },
                        {
                            "include": "#scenes"
                        }
                    ]
                }
            ]
        },
        "code-blocks" : {
            "patterns": [
                {
                    "name": "source.bs",
                    "begin": "code.*?(?=:)",
                    "end": "(?=\\])",
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#scenes"
                        },
                        {
                            "include": "#lib-functions"
                        },
                        {
                            "include": "#assignment"
                        },
                        {
                            "include": "#operators"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#control-statement"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#collections"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                }
            ]
        }
    }
}